service: update-shelters

provider:
  name: aws
  runtime: go1.x
  tags:
    project: hitta-skyddsrum

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "rds:CreateDBInstance"
        - "rds:DeleteDBInstance"
      Resource: { "Fn::Join" : ["", ["arn:aws:rds:::", { "Ref" : "SheltersDB" } ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: "arn:aws:s3:::${env:BUCKET_NAME}/*"
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: "arn:aws:s3:::${env:BUCKET_NAME}"

package:
 exclude:
   - ./**
 include:
   - ./lambda-bin/**

functions:
  dbMigration:
    handler: lambda-bin/migrate-db
    environment:
      DB_MASTER_USER: ${env:DB_MASTER_USER}
      DB_MASTER_PASSWORD: ${env:DB_MASTER_PASSWORD}
      DB_ADDRESS:
        "Fn::GetAtt": [ SheltersDB, Endpoint.Address ]
    vpc:
      securityGroupIds:
        - Ref: SheltersVPCSecurityGroup
      subnetIds:
        - Ref: SheltersSubnet1
        - Ref: SheltersSubnet2
  shapeToCsv:
    handler: lambda-bin/shape-to-csv
  importCsvToMysql:
    handler: lambda-bin/import-csv-to-mysql
    timeout: 300
    environment:
      DB_MASTER_USER: ${env:DB_MASTER_USER}
      DB_MASTER_PASSWORD: ${env:DB_MASTER_PASSWORD}
      DB_ADDRESS:
        "Fn::GetAtt": [ SheltersDB, Endpoint.Address ]
    vpc:
      securityGroupIds:
        - Ref: SheltersVPCSecurityGroup
      subnetIds:
        - Ref: SheltersSubnet1
        - Ref: SheltersSubnet2

resources:
  Resources:
    S3BucketSheltersBucket:
      Type: AWS::S3::Bucket
      DependsOn:
        - ShapeToCsvPermission
        - ImportCsvToMysqlPermission
      Properties:
        BucketName: ${env:BUCKET_NAME}
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: "s3:ObjectCreated:*"
              Function: !GetAtt
                - ShapeToCsvLambdaFunction
                - Arn
              Filter:
                S3Key:
                  Rules:
                    -
                      Name: suffix
                      Value: zip
            - Event: "s3:ObjectCreated:*"
              Function: !GetAtt
                - ImportCsvToMysqlLambdaFunction
                - Arn
              Filter:
                S3Key:
                  Rules:
                    -
                      Name: suffix
                      Value: csv
    ImportCsvToMysqlPermission:
      DependsOn:
        - ImportCsvToMysqlLambdaFunction
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt
          - ImportCsvToMysqlLambdaFunction
          - Arn
        Action: "lambda:InvokeFunction"
        Principal: "s3.amazonaws.com"
        SourceArn: "arn:aws:s3:::${env:BUCKET_NAME}"
    ShapeToCsvPermission:
      DependsOn:
        - ImportCsvToMysqlLambdaFunction
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt
          - ShapeToCsvLambdaFunction
          - Arn
        Action: "lambda:InvokeFunction"
        Principal: "s3.amazonaws.com"
        SourceArn: "arn:aws:s3:::${env:BUCKET_NAME}"
    SheltersDB:
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: 5
        DBInstanceClass: db.t2.micro
        DBSubnetGroupName: !Ref SheltersDBSubnetGroup
        VPCSecurityGroups:
          - Fn::GetAtt: [ SheltersVPCSecurityGroup, GroupId ]
        Engine: MySQL
        MasterUsername: ${env:DB_MASTER_USER}
        MasterUserPassword: ${env:DB_MASTER_PASSWORD}
    SheltersDBMigrationTrigger:
      Type: Custom::DBMigration
      DependsOn:
        - SheltersDB
      Properties:
        ServiceToken: !GetAtt
          - DbMigrationLambdaFunction
          - Arn
    SheltersDBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Subnet for DB connections"
        SubnetIds:
          - Ref: SheltersSubnet1
          - Ref: SheltersSubnet2
    SheltersSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select [ 0, {Fn::GetAZs: ""} ]
        CidrBlock: 10.0.1.0/24
        VpcId: !Ref SheltersVPC
    SheltersSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select [ 1, {Fn::GetAZs: ""} ]
        CidrBlock: 10.0.2.0/24
        VpcId: !Ref SheltersVPC
    SheltersVPCSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Security group for DB connections"
        VpcId: !Ref SheltersVPC
    SheltersVPCSecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref SheltersVPCSecurityGroup
        IpProtocol: tcp
        FromPort: "3306"
        ToPort: "3306"
        SourceSecurityGroupId: !Ref SheltersVPCSecurityGroup
    SheltersVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
    SheltersRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref SheltersVPC
    SheltersSubnet1Association:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref SheltersSubnet1
        RouteTableId: !Ref SheltersRouteTable
    SheltersSubnet2Association:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref SheltersSubnet2
        RouteTableId: !Ref SheltersRouteTable
    SheltersVPCS3Endpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        VpcId: !Ref SheltersVPC
        PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
        RouteTableIds:
          - !Ref SheltersRouteTable
        ServiceName: !Join ['', ['com.amazonaws.', !Ref 'AWS::Region', '.s3']]
